// Code generated by hertz generator.

package user

import (
	"context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"nico_minidouyin/config"
	"nico_minidouyin/gen/douyin/user"
	pb "nico_minidouyin/gen/douyin/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var (
	conn   *grpc.ClientConn
	client pb.UserServiceClient
)

func init() {
	var opts []grpc.DialOption

	opts = append(opts, grpc.WithTransportCredentials(insecure.NewCredentials()))
	var err error
	conn, err = grpc.Dial(config.UserServiceAddr, opts...)
	if err != nil {
		panic(err)
	}
	client = pb.NewUserServiceClient(conn)
}

// GetUser .
// @router /douyin/user/ [GET]
func GetUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//resp := new(user.UserResponse)
	resp, err := client.GetUser(ctx, &req)
	if err != nil {
		c.JSON(consts.StatusInternalServerError, err.Error())
		return
	}
	c.JSON(consts.StatusOK, resp)
}
